// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts'

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this)
  }
}

export class Approval__Params {
  _event: Approval

  constructor(event: Approval) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class ArkAdded extends ethereum.Event {
  get params(): ArkAdded__Params {
    return new ArkAdded__Params(this)
  }
}

export class ArkAdded__Params {
  _event: ArkAdded

  constructor(event: ArkAdded) {
    this._event = event
  }

  get ark(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get maxAllocation(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class ArkMaxAllocationUpdated extends ethereum.Event {
  get params(): ArkMaxAllocationUpdated__Params {
    return new ArkMaxAllocationUpdated__Params(this)
  }
}

export class ArkMaxAllocationUpdated__Params {
  _event: ArkMaxAllocationUpdated

  constructor(event: ArkMaxAllocationUpdated) {
    this._event = event
  }

  get ark(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newMaxAllocation(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class ArkRemoved extends ethereum.Event {
  get params(): ArkRemoved__Params {
    return new ArkRemoved__Params(this)
  }
}

export class ArkRemoved__Params {
  _event: ArkRemoved

  constructor(event: ArkRemoved) {
    this._event = event
  }

  get ark(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class CooldownUpdated extends ethereum.Event {
  get params(): CooldownUpdated__Params {
    return new CooldownUpdated__Params(this)
  }
}

export class CooldownUpdated__Params {
  _event: CooldownUpdated

  constructor(event: CooldownUpdated) {
    this._event = event
  }

  get previousCooldown(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get newCooldown(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this)
  }
}

export class Deposit__Params {
  _event: Deposit

  constructor(event: Deposit) {
    this._event = event
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class DepositCapUpdated extends ethereum.Event {
  get params(): DepositCapUpdated__Params {
    return new DepositCapUpdated__Params(this)
  }
}

export class DepositCapUpdated__Params {
  _event: DepositCapUpdated

  constructor(event: DepositCapUpdated) {
    this._event = event
  }

  get newCap(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class FeeAddressUpdated extends ethereum.Event {
  get params(): FeeAddressUpdated__Params {
    return new FeeAddressUpdated__Params(this)
  }
}

export class FeeAddressUpdated__Params {
  _event: FeeAddressUpdated

  constructor(event: FeeAddressUpdated) {
    this._event = event
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class FleetCommanderBufferAdjusted extends ethereum.Event {
  get params(): FleetCommanderBufferAdjusted__Params {
    return new FleetCommanderBufferAdjusted__Params(this)
  }
}

export class FleetCommanderBufferAdjusted__Params {
  _event: FleetCommanderBufferAdjusted

  constructor(event: FleetCommanderBufferAdjusted) {
    this._event = event
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get totalMoved(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class FleetCommanderMinFundsBufferBalanceUpdated extends ethereum.Event {
  get params(): FleetCommanderMinFundsBufferBalanceUpdated__Params {
    return new FleetCommanderMinFundsBufferBalanceUpdated__Params(this)
  }
}

export class FleetCommanderMinFundsBufferBalanceUpdated__Params {
  _event: FleetCommanderMinFundsBufferBalanceUpdated

  constructor(event: FleetCommanderMinFundsBufferBalanceUpdated) {
    this._event = event
  }

  get newBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class FundsBufferBalanceUpdated extends ethereum.Event {
  get params(): FundsBufferBalanceUpdated__Params {
    return new FundsBufferBalanceUpdated__Params(this)
  }
}

export class FundsBufferBalanceUpdated__Params {
  _event: FundsBufferBalanceUpdated

  constructor(event: FundsBufferBalanceUpdated) {
    this._event = event
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get prevBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class FundsQueueRefilled extends ethereum.Event {
  get params(): FundsQueueRefilled__Params {
    return new FundsQueueRefilled__Params(this)
  }
}

export class FundsQueueRefilled__Params {
  _event: FundsQueueRefilled

  constructor(event: FundsQueueRefilled) {
    this._event = event
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get prevBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class MinFundsQueueBalanceUpdated extends ethereum.Event {
  get params(): MinFundsQueueBalanceUpdated__Params {
    return new MinFundsQueueBalanceUpdated__Params(this)
  }
}

export class MinFundsQueueBalanceUpdated__Params {
  _event: MinFundsQueueBalanceUpdated

  constructor(event: MinFundsQueueBalanceUpdated) {
    this._event = event
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class QueuedFundsCommitted extends ethereum.Event {
  get params(): QueuedFundsCommitted__Params {
    return new QueuedFundsCommitted__Params(this)
  }
}

export class QueuedFundsCommitted__Params {
  _event: QueuedFundsCommitted

  constructor(event: QueuedFundsCommitted) {
    this._event = event
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get prevBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Rebalanced extends ethereum.Event {
  get params(): Rebalanced__Params {
    return new Rebalanced__Params(this)
  }
}

export class Rebalanced__Params {
  _event: Rebalanced

  constructor(event: Rebalanced) {
    this._event = event
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get rebalances(): Array<RebalancedRebalancesStruct> {
    return this._event.parameters[1].value.toTupleArray<RebalancedRebalancesStruct>()
  }
}

export class RebalancedRebalancesStruct extends ethereum.Tuple {
  get fromArk(): Address {
    return this[0].toAddress()
  }

  get toArk(): Address {
    return this[1].toAddress()
  }

  get amount(): BigInt {
    return this[2].toBigInt()
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this)
  }
}

export class Transfer__Params {
  _event: Transfer

  constructor(event: Transfer) {
    this._event = event
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this)
  }
}

export class Withdraw__Params {
  _event: Withdraw

  constructor(event: Withdraw) {
    this._event = event
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress()
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }
}

export class FleetCommander__arksResultValue0Struct extends ethereum.Tuple {
  get ark(): Address {
    return this[0].toAddress()
  }

  get maxAllocation(): BigInt {
    return this[1].toBigInt()
  }
}

export class FleetCommander extends ethereum.SmartContract {
  static bind(address: Address): FleetCommander {
    return new FleetCommander('FleetCommander', address)
  }

  MAX_REBALANCE_OPERATIONS(): BigInt {
    let result = super.call('MAX_REBALANCE_OPERATIONS', 'MAX_REBALANCE_OPERATIONS():(uint256)', [])

    return result[0].toBigInt()
  }

  try_MAX_REBALANCE_OPERATIONS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'MAX_REBALANCE_OPERATIONS',
      'MAX_REBALANCE_OPERATIONS():(uint256)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ])

    return result[0].toBigInt()
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('allowance', 'allowance(address,address):(uint256)', [
      ethereum.Value.fromAddress(owner),
      ethereum.Value.fromAddress(spender),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ])

    return result[0].toBoolean()
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  arks(_address: Address): FleetCommander__arksResultValue0Struct {
    let result = super.call('arks', 'arks(address):((address,uint256))', [
      ethereum.Value.fromAddress(_address),
    ])

    return changetype<FleetCommander__arksResultValue0Struct>(result[0].toTuple())
  }

  try_arks(_address: Address): ethereum.CallResult<FleetCommander__arksResultValue0Struct> {
    let result = super.tryCall('arks', 'arks(address):((address,uint256))', [
      ethereum.Value.fromAddress(_address),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(
      changetype<FleetCommander__arksResultValue0Struct>(value[0].toTuple()),
    )
  }

  asset(): Address {
    let result = super.call('asset', 'asset():(address)', [])

    return result[0].toAddress()
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall('asset', 'asset():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  balanceOf(account: Address): BigInt {
    let result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ])

    return result[0].toBigInt()
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])

    return result[0].toBigInt()
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToAssets', 'convertToAssets(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])

    return result[0].toBigInt()
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('convertToShares', 'convertToShares(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  decimals(): i32 {
    let result = super.call('decimals', 'decimals():(uint8)', [])

    return result[0].toI32()
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall('decimals', 'decimals():(uint8)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    let result = super.call('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ])

    return result[0].toBigInt()
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  depositCap(): BigInt {
    let result = super.call('depositCap', 'depositCap():(uint256)', [])

    return result[0].toBigInt()
  }

  try_depositCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('depositCap', 'depositCap():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  forceWithdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call('forceWithdraw', 'forceWithdraw(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_forceWithdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'forceWithdraw',
      'forceWithdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  fundsBufferBalance(): BigInt {
    let result = super.call('fundsBufferBalance', 'fundsBufferBalance():(uint256)', [])

    return result[0].toBigInt()
  }

  try_fundsBufferBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('fundsBufferBalance', 'fundsBufferBalance():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getCooldown(): BigInt {
    let result = super.call('getCooldown', 'getCooldown():(uint256)', [])

    return result[0].toBigInt()
  }

  try_getCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getCooldown', 'getCooldown():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getLastActionTimestamp(): BigInt {
    let result = super.call('getLastActionTimestamp', 'getLastActionTimestamp():(uint256)', [])

    return result[0].toBigInt()
  }

  try_getLastActionTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getLastActionTimestamp', 'getLastActionTimestamp():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxBufferWithdrawalPercentage(): BigInt {
    let result = super.call(
      'maxBufferWithdrawalPercentage',
      'maxBufferWithdrawalPercentage():(uint256)',
      [],
    )

    return result[0].toBigInt()
  }

  try_maxBufferWithdrawalPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'maxBufferWithdrawalPercentage',
      'maxBufferWithdrawalPercentage():(uint256)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxDeposit(owner: Address): BigInt {
    let result = super.call('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_maxDeposit(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxMint(owner: Address): BigInt {
    let result = super.call('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_maxMint(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  minFundsBufferBalance(): BigInt {
    let result = super.call('minFundsBufferBalance', 'minFundsBufferBalance():(uint256)', [])

    return result[0].toBigInt()
  }

  try_minFundsBufferBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('minFundsBufferBalance', 'minFundsBufferBalance():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  minPositionWithdrawalPercentage(): BigInt {
    let result = super.call(
      'minPositionWithdrawalPercentage',
      'minPositionWithdrawalPercentage():(uint256)',
      [],
    )

    return result[0].toBigInt()
  }

  try_minPositionWithdrawalPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'minPositionWithdrawalPercentage',
      'minPositionWithdrawalPercentage():(uint256)',
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  mint(shares: BigInt, to: Address): BigInt {
    let result = super.call('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ])

    return result[0].toBigInt()
  }

  try_mint(shares: BigInt, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(to),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  name(): string {
    let result = super.call('name', 'name():(string)', [])

    return result[0].toString()
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])

    return result[0].toBigInt()
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewDeposit', 'previewDeposit(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])

    return result[0].toBigInt()
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])

    return result[0].toBigInt()
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewRedeem', 'previewRedeem(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])

    return result[0].toBigInt()
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('previewWithdraw', 'previewWithdraw(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_redeem(shares: BigInt, receiver: Address, owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('redeem', 'redeem(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  symbol(): string {
    let result = super.call('symbol', 'symbol():(string)', [])

    return result[0].toString()
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall('symbol', 'symbol():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  totalAssets(): BigInt {
    let result = super.call('totalAssets', 'totalAssets():(uint256)', [])

    return result[0].toBigInt()
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalAssets', 'totalAssets():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  totalSupply(): BigInt {
    let result = super.call('totalSupply', 'totalSupply():(uint256)', [])

    return result[0].toBigInt()
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalSupply', 'totalSupply():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  transfer(param0: Address, param1: BigInt): boolean {
    let result = super.call('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ])

    return result[0].toBoolean()
  }

  try_transfer(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call('transferFrom', 'transferFrom(address,address,uint256):(bool)', [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ])

    return result[0].toBoolean()
  }

  try_transferFrom(from: Address, to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('transferFrom', 'transferFrom(address,address,uint256):(bool)', [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call('withdraw', 'withdraw(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ])

    return result[0].toBigInt()
  }

  try_withdraw(assets: BigInt, receiver: Address, owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('withdraw', 'withdraw(uint256,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
      ethereum.Value.fromAddress(owner),
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(this._call.inputValues[0].value.toTuple())
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get configurationManager(): Address {
    return this[0].toAddress()
  }

  get accessManager(): Address {
    return this[1].toAddress()
  }

  get initialArks(): Array<ConstructorCallParamsInitialArksStruct> {
    return this[2].toTupleArray<ConstructorCallParamsInitialArksStruct>()
  }

  get initialMinimumFundsBufferBalance(): BigInt {
    return this[3].toBigInt()
  }

  get initialRebalanceCooldown(): BigInt {
    return this[4].toBigInt()
  }

  get asset(): Address {
    return this[5].toAddress()
  }

  get name(): string {
    return this[6].toString()
  }

  get symbol(): string {
    return this[7].toString()
  }

  get initialMinimumPositionWithdrawal(): BigInt {
    return this[8].toBigInt()
  }

  get initialMaximumBufferWithdrawal(): BigInt {
    return this[9].toBigInt()
  }

  get depositCap(): BigInt {
    return this[10].toBigInt()
  }
}

export class ConstructorCallParamsInitialArksStruct extends ethereum.Tuple {
  get ark(): Address {
    return this[0].toAddress()
  }

  get maxAllocation(): BigInt {
    return this[1].toBigInt()
  }
}

export class AddArkCall extends ethereum.Call {
  get inputs(): AddArkCall__Inputs {
    return new AddArkCall__Inputs(this)
  }

  get outputs(): AddArkCall__Outputs {
    return new AddArkCall__Outputs(this)
  }
}

export class AddArkCall__Inputs {
  _call: AddArkCall

  constructor(call: AddArkCall) {
    this._call = call
  }

  get ark(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get maxAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class AddArkCall__Outputs {
  _call: AddArkCall

  constructor(call: AddArkCall) {
    this._call = call
  }
}

export class AdjustBufferCall extends ethereum.Call {
  get inputs(): AdjustBufferCall__Inputs {
    return new AdjustBufferCall__Inputs(this)
  }

  get outputs(): AdjustBufferCall__Outputs {
    return new AdjustBufferCall__Outputs(this)
  }
}

export class AdjustBufferCall__Inputs {
  _call: AdjustBufferCall

  constructor(call: AdjustBufferCall) {
    this._call = call
  }

  get rebalanceData(): Array<AdjustBufferCallRebalanceDataStruct> {
    return this._call.inputValues[0].value.toTupleArray<AdjustBufferCallRebalanceDataStruct>()
  }
}

export class AdjustBufferCall__Outputs {
  _call: AdjustBufferCall

  constructor(call: AdjustBufferCall) {
    this._call = call
  }
}

export class AdjustBufferCallRebalanceDataStruct extends ethereum.Tuple {
  get fromArk(): Address {
    return this[0].toAddress()
  }

  get toArk(): Address {
    return this[1].toAddress()
  }

  get amount(): BigInt {
    return this[2].toBigInt()
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this)
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this)
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this)
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this)
  }
}

export class DepositCall__Inputs {
  _call: DepositCall

  constructor(call: DepositCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class DepositCall__Outputs {
  _call: DepositCall

  constructor(call: DepositCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class EmergencyShutdownCall extends ethereum.Call {
  get inputs(): EmergencyShutdownCall__Inputs {
    return new EmergencyShutdownCall__Inputs(this)
  }

  get outputs(): EmergencyShutdownCall__Outputs {
    return new EmergencyShutdownCall__Outputs(this)
  }
}

export class EmergencyShutdownCall__Inputs {
  _call: EmergencyShutdownCall

  constructor(call: EmergencyShutdownCall) {
    this._call = call
  }
}

export class EmergencyShutdownCall__Outputs {
  _call: EmergencyShutdownCall

  constructor(call: EmergencyShutdownCall) {
    this._call = call
  }
}

export class ForceRebalanceCall extends ethereum.Call {
  get inputs(): ForceRebalanceCall__Inputs {
    return new ForceRebalanceCall__Inputs(this)
  }

  get outputs(): ForceRebalanceCall__Outputs {
    return new ForceRebalanceCall__Outputs(this)
  }
}

export class ForceRebalanceCall__Inputs {
  _call: ForceRebalanceCall

  constructor(call: ForceRebalanceCall) {
    this._call = call
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes()
  }
}

export class ForceRebalanceCall__Outputs {
  _call: ForceRebalanceCall

  constructor(call: ForceRebalanceCall) {
    this._call = call
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this)
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this)
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall

  constructor(call: ForceWithdrawCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall

  constructor(call: ForceWithdrawCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this)
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this)
  }
}

export class MintCall__Inputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class MintCall__Outputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class MintSharesAsFeesCall extends ethereum.Call {
  get inputs(): MintSharesAsFeesCall__Inputs {
    return new MintSharesAsFeesCall__Inputs(this)
  }

  get outputs(): MintSharesAsFeesCall__Outputs {
    return new MintSharesAsFeesCall__Outputs(this)
  }
}

export class MintSharesAsFeesCall__Inputs {
  _call: MintSharesAsFeesCall

  constructor(call: MintSharesAsFeesCall) {
    this._call = call
  }
}

export class MintSharesAsFeesCall__Outputs {
  _call: MintSharesAsFeesCall

  constructor(call: MintSharesAsFeesCall) {
    this._call = call
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this)
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this)
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall

  constructor(call: RebalanceCall) {
    this._call = call
  }

  get rebalanceData(): Array<RebalanceCallRebalanceDataStruct> {
    return this._call.inputValues[0].value.toTupleArray<RebalanceCallRebalanceDataStruct>()
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall

  constructor(call: RebalanceCall) {
    this._call = call
  }
}

export class RebalanceCallRebalanceDataStruct extends ethereum.Tuple {
  get fromArk(): Address {
    return this[0].toAddress()
  }

  get toArk(): Address {
    return this[1].toAddress()
  }

  get amount(): BigInt {
    return this[2].toBigInt()
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this)
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this)
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall

  constructor(call: RedeemCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall

  constructor(call: RedeemCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class RemoveArkCall extends ethereum.Call {
  get inputs(): RemoveArkCall__Inputs {
    return new RemoveArkCall__Inputs(this)
  }

  get outputs(): RemoveArkCall__Outputs {
    return new RemoveArkCall__Outputs(this)
  }
}

export class RemoveArkCall__Inputs {
  _call: RemoveArkCall

  constructor(call: RemoveArkCall) {
    this._call = call
  }

  get ark(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class RemoveArkCall__Outputs {
  _call: RemoveArkCall

  constructor(call: RemoveArkCall) {
    this._call = call
  }
}

export class SetDepositCapCall extends ethereum.Call {
  get inputs(): SetDepositCapCall__Inputs {
    return new SetDepositCapCall__Inputs(this)
  }

  get outputs(): SetDepositCapCall__Outputs {
    return new SetDepositCapCall__Outputs(this)
  }
}

export class SetDepositCapCall__Inputs {
  _call: SetDepositCapCall

  constructor(call: SetDepositCapCall) {
    this._call = call
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class SetDepositCapCall__Outputs {
  _call: SetDepositCapCall

  constructor(call: SetDepositCapCall) {
    this._call = call
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this)
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this)
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall

  constructor(call: SetFeeAddressCall) {
    this._call = call
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall

  constructor(call: SetFeeAddressCall) {
    this._call = call
  }
}

export class SetMaxAllocationCall extends ethereum.Call {
  get inputs(): SetMaxAllocationCall__Inputs {
    return new SetMaxAllocationCall__Inputs(this)
  }

  get outputs(): SetMaxAllocationCall__Outputs {
    return new SetMaxAllocationCall__Outputs(this)
  }
}

export class SetMaxAllocationCall__Inputs {
  _call: SetMaxAllocationCall

  constructor(call: SetMaxAllocationCall) {
    this._call = call
  }

  get ark(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get newMaxAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class SetMaxAllocationCall__Outputs {
  _call: SetMaxAllocationCall

  constructor(call: SetMaxAllocationCall) {
    this._call = call
  }
}

export class SetMinBufferBalanceCall extends ethereum.Call {
  get inputs(): SetMinBufferBalanceCall__Inputs {
    return new SetMinBufferBalanceCall__Inputs(this)
  }

  get outputs(): SetMinBufferBalanceCall__Outputs {
    return new SetMinBufferBalanceCall__Outputs(this)
  }
}

export class SetMinBufferBalanceCall__Inputs {
  _call: SetMinBufferBalanceCall

  constructor(call: SetMinBufferBalanceCall) {
    this._call = call
  }

  get newBalance(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class SetMinBufferBalanceCall__Outputs {
  _call: SetMinBufferBalanceCall

  constructor(call: SetMinBufferBalanceCall) {
    this._call = call
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this)
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this)
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class UpdateRebalanceCooldownCall extends ethereum.Call {
  get inputs(): UpdateRebalanceCooldownCall__Inputs {
    return new UpdateRebalanceCooldownCall__Inputs(this)
  }

  get outputs(): UpdateRebalanceCooldownCall__Outputs {
    return new UpdateRebalanceCooldownCall__Outputs(this)
  }
}

export class UpdateRebalanceCooldownCall__Inputs {
  _call: UpdateRebalanceCooldownCall

  constructor(call: UpdateRebalanceCooldownCall) {
    this._call = call
  }

  get newCooldown(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class UpdateRebalanceCooldownCall__Outputs {
  _call: UpdateRebalanceCooldownCall

  constructor(call: UpdateRebalanceCooldownCall) {
    this._call = call
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this)
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this)
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall

  constructor(call: WithdrawCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall

  constructor(call: WithdrawCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}
