# Subgraph Schema: Yield Aggregator
# Version: 1.3.1
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BASE
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  GNOSIS
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity @regularPolling {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity @regularPolling {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

enum VaultFeeType {
  " One-time fee charged by the protocol during deposit, in percentages of the deposit token "
  DEPOSIT_FEE

  " One-time fee charged by the protocol during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE

  " Fees charged by the protocol during harvest, in percentages of the interest accrued "
  PERFORMANCE_FEE

  " Fees charged by the protocol on a periodic basis, in percentages of the total principal "
  MANAGEMENT_FEE
}

type VaultFee @entity @regularPolling {
  " { Vault fee type }-{ Vault address } "
  id: ID!

  " Fee as a percentage of the trade (swap) amount. Does not always apply "
  feePercentage: BigDecimal

  " Type of fee this vault uses "
  feeType: VaultFeeType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]! @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type YieldAggregator implements Protocol @entity @regularPolling {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Yearn v3 "
  name: String!

  " Slug of protocol, including version. e.g. yearn-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]! @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Vaults #####

  " All vaults that belong to this protocol "
  vaults: [Vault!]! @derivedFrom(field: "protocol")
  vaultsArray: [Vault!]!
  lastDailyUpdateTimestamp: BigInt
  lastHourlyUpdateTimestamp: BigInt
  lastWeeklyUpdateTimestamp: BigInt
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: YieldAggregator!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of deposits in a day "
  dailyDepositCount: Int!

  " Total number of withdrawals in a day "
  dailyWithdrawCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type UsageMetricsHourlySnapshot @entity @hourlySnapshot {
  " { # of hours since Unix epoch time } "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: YieldAggregator!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of deposits in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals in an hour "
  hourlyWithdrawCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: YieldAggregator!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###############################
##### Pool-Level Metadata #####
###############################

type Vault @entity @regularPolling {
  " Smart contract address of the vault "
  id: ID!

  " The protocol this vault belongs to "
  protocol: YieldAggregator!

  " Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  " Details of the Fleet Commander "
  details: String

  " Symbol of liquidity pool (e.g. 3CRV) "
  symbol: String

  " Token that need to be deposited to take a position in protocol "
  inputToken: Token!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]!

  " DEPRECATED (use depositCap instead): Some vaults have a deposit cap. This is in input token amount "
  depositLimit: BigInt!

  " Some vaults have a deposit cap. This is in input token amount "
  depositCap: BigInt!

  " Some vaults have a minimum buffer balance. This is in input token amount "
  minimumBufferBalance: BigInt!

  " Address of the staking rewards manager "
  stakingRewardsManager: Bytes!

  " Some vaults have a maximum number of rebalance operations. "
  maxRebalanceOperations: BigInt!

  " Type of fees incurred to the user. Should include all fees that apply to the vault "
  fees: [VaultFee!]!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the vault. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Price of input token in USD "
  inputTokenPriceUSD: BigDecimal

  " Total withdrawable assets "
  withdrawableTotalAssets: BigInt

  " Total withdrawable assets in USD "
  withdrawableTotalAssetsUSD: BigDecimal

  " Amount of input token per full share of output token. Usually corresponds to the value of `pricePerShare` or `pricePerFullShare` in the vault contract. "
  pricePerShare: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]!

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmountsPerOutputToken: [BigInt!]!

  " Duration of the reward token emission in seconds "
  rewardTokenEmissionsFinish: [BigInt!]!

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  ##### Snapshots #####

  " Vault daily snapshots "
  dailySnapshots: [VaultDailySnapshot!]! @derivedFrom(field: "vault")

  " Vault hourly snapshots "
  hourlySnapshots: [VaultHourlySnapshot!]! @derivedFrom(field: "vault")

  " Vault weekly snapshots "
  weeklySnapshots: [VaultWeeklySnapshot!]! @derivedFrom(field: "vault")

  ##### Events #####

  " All deposits made to this vault "
  deposits: [Deposit!]! @derivedFrom(field: "vault")

  " All withdrawals made from this vault "
  withdraws: [Withdraw!]! @derivedFrom(field: "vault")

  # Additional fields

  " APR based on revenue between last two snapshots "
  calculatedApr: BigDecimal!

  aprValues: [BigDecimal!]!

  apr7d: BigDecimal!
  apr30d: BigDecimal!
  apr90d: BigDecimal!
  apr180d: BigDecimal!
  apr365d: BigDecimal!

  lastUpdateTimestamp: BigInt!
  lastUpdatePricePerShare: BigDecimal!

  weeklyInterestRates: [WeeklyInterestRate!]! @derivedFrom(field: "vault")
  dailyInterestRates: [DailyInterestRate!]! @derivedFrom(field: "vault")
  hourlyInterestRates: [HourlyInterestRate!]! @derivedFrom(field: "vault")

  arks: [Ark!]! @derivedFrom(field: "vault")
  arksArray: [Ark!]!

  rebalances: [Rebalance!]! @derivedFrom(field: "vault")
  rebalanceCount: BigInt!
  actionSnapshots: [PostActionVaultSnapshot!]! @derivedFrom(field: "vault")

  rewardsManager: RewardsManager! @derivedFrom(field: "vault")

  positions: [Position!]!
}

#################################
##### Pool-Level Timeseries #####
#################################

type VaultDailySnapshot @entity @dailySnapshot {
  " { Smart contract address of the vault }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the vault, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the vault, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the vault. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily revenue generated by the vault. "
  dailyTotalRevenueUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Price of input token in USD "
  inputTokenPriceUSD: BigDecimal

  " Amount of input token per full share of output token. Usually corresponds to the value of `pricePerShare` or `pricePerFullShare` in the vault contract. "
  pricePerShare: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  " APR based on last day's revenue "
  calculatedApr: BigDecimal!
}

type VaultHourlySnapshot @entity @hourlySnapshot {
  " { Smart contract address of the vault }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the vault, accrued to the supply side. "
  hourlySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the vault, accrued to the protocol. "
  hourlyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the vault. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Hourly revenue generated by the vault. "
  hourlyTotalRevenueUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Price of input token in USD "
  inputTokenPriceUSD: BigDecimal

  " Amount of input token per full share of output token. Usually corresponds to the value of `pricePerShare` or `pricePerFullShare` in the vault contract. "
  pricePerShare: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  " APR based on last hour's revenue "
  calculatedApr: BigDecimal!
}

type VaultWeeklySnapshot @entity @weeklySnapshot {
  " { Smart contract address of the vault }-{ # of weeks since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Weekly revenue generated by the vault, accrued to the supply side. "
  weeklySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Weekly revenue generated by the vault, accrued to the protocol. "
  weeklyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the vault. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Weekly revenue generated by the vault. "
  weeklyTotalRevenueUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Price of input token in USD "
  inputTokenPriceUSD: BigDecimal

  " Amount of input token per full share of output token. Usually corresponds to the value of `pricePerShare` or `pricePerFullShare` in the vault contract. "
  pricePerShare: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  " APR based on last week's revenue "
  calculatedApr: BigDecimal!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Deposit implements Event @entity @transaction {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Address that deposited tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position in USD "
  inputTokenBalanceNormalizedUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  " Position that this deposit belongs to "
  position: Position!
}

type Withdraw implements Event @entity @transaction {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position in USD "
  inputTokenBalanceNormalizedUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  " Position that this withdraw belongs to "
  position: Position!
}
type Staked implements Event @entity @transaction {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token staked "
  asset: Token!

  " Amount of token staked in native units "
  amount: BigInt!

  " Amount of token staked in USD "
  amountUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position in USD "
  inputTokenBalanceNormalizedUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  " Position that this stake belongs to "
  position: Position!
}
type Unstaked implements Event @entity @transaction {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token unstaked in native units "
  amount: BigInt!

  " Amount of token unstaked in USD "
  amountUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position in USD "
  inputTokenBalanceNormalizedUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  " Position that this unstake belongs to "
  position: Position!
}
# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity @regularPolling {
  " Address of the account "
  id: ID!
  positions: [Position!]! @derivedFrom(field: "account")
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: ID!
}

# Additional

## Events

type Rebalance @entity @transaction {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Ark that we reblance to "
  to: Ark!

  " Ark that we reblance from "
  from: Ark!

  " Post action snapshot of the from ark "
  fromPostAction: PostActionArkSnapshot!

  " Post action snapshot of the to ark "
  toPostAction: PostActionArkSnapshot!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token rebalanced "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!
}

type Board implements Event @entity @transaction {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  ark: Ark!
}

type Disembark implements Event @entity @transaction {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!

  " The vault involving this transaction "
  vault: Vault!

  ark: Ark!
}
## Entities

type TokenPrice @entity {
  id: Bytes!
  token: Token!
  blockNumber: BigInt!
  price: BigDecimal!
  oracle: String!
}

type Position @entity {
  " Unique identifier for the position "
  id: ID!

  " Account associated with the position "
  account: Account!

  " Vault where the position is held "
  vault: Vault!

  " Sum of deposits in the position - in input token precision"
  inputTokenDeposits: BigInt!

  " Sum of deposits in the position - in input token precision normalized to USD"
  inputTokenDepositsNormalizedInUSD: BigDecimal!

  " Sum of withdrawals in the position - in input token precision"
  inputTokenWithdrawals: BigInt!

  " Sum of withdrawals in the position - in input token precision normalized to USD"
  inputTokenWithdrawalsNormalizedInUSD: BigDecimal!

  " Balance of the input token for the position "
  inputTokenBalance: BigInt!

  " Supply of the output token for the position "
  outputTokenBalance: BigInt!

  " Staked balance of the input token for the position "
  stakedInputTokenBalance: BigInt!

  " Staked balance of the output token for the position "
  stakedOutputTokenBalance: BigInt!

  " Unstaked balance of the input token for the position "
  unstakedInputTokenBalance: BigInt!

  " Unstaked balance of the output token for the position " 
  unstakedOutputTokenBalance: BigInt!

  " Normalized supply of the input token "
  inputTokenBalanceNormalized: BigDecimal!

  " Normalized staked balance of the input token "
  stakedInputTokenBalanceNormalized: BigDecimal!

  " Normalized unstaked balance of the input token "
  unstakedInputTokenBalanceNormalized: BigDecimal!

  " Normalized supply of the input token in USD "
  inputTokenBalanceNormalizedInUSD: BigDecimal!

  " Normalized staked balance of the input token in USD "
  stakedInputTokenBalanceNormalizedInUSD: BigDecimal!

  " Normalized unstaked balance of the input token in USD "
  unstakedInputTokenBalanceNormalizedInUSD: BigDecimal!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  deposits: [Deposit!]! @derivedFrom(field: "position")
  withdrawals: [Withdraw!]! @derivedFrom(field: "position")
  stakedEvents: [Staked!]! @derivedFrom(field: "position")
  unstakedEvents: [Unstaked!]! @derivedFrom(field: "position")

  hourlySnapshots: [PositionHourlySnapshot!]! @derivedFrom(field: "position")
  dailySnapshots: [PositionDailySnapshot!]! @derivedFrom(field: "position")
  weeklySnapshots: [PositionWeeklySnapshot!]! @derivedFrom(field: "position")
}

type PositionHourlySnapshot @entity @hourlySnapshot {
  " { Position ID }-{ # of hours since Unix epoch time } "
  id: ID!

  " The position this snapshot belongs to "
  position: Position!

  " Sum of deposits in the position - in input token precision"
  inputTokenDeposits: BigInt!

  " Sum of deposits in the position - in input token precision normalized to USD"
  inputTokenDepositsNormalizedInUSD: BigDecimal!

  " Sum of withdrawals in the position - in input token precision"
  inputTokenWithdrawals: BigInt!

  " Sum of withdrawals in the position - in input token precision normalized to USD"
  inputTokenWithdrawalsNormalizedInUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position normalized to USD "
  inputTokenBalanceNormalizedInUSD: BigDecimal!

  " Amount of output token in the position "
  outputTokenBalance: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type PositionDailySnapshot @entity @dailySnapshot {
  " { Position ID }-{ # of days since Unix epoch time } "
  id: ID!

  " The position this snapshot belongs to "
  position: Position!

  " Sum of deposits in the position - in input token precision"
  inputTokenDeposits: BigInt!

  " Sum of deposits in the position - in input token precision normalized to USD"
  inputTokenDepositsNormalizedInUSD: BigDecimal!

  " Sum of withdrawals in the position - in input token precision"
  inputTokenWithdrawals: BigInt!

  " Sum of withdrawals in the position - in input token precision normalized to USD"
  inputTokenWithdrawalsNormalizedInUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position normalized to USD "
  inputTokenBalanceNormalizedInUSD: BigDecimal!

  " Amount of output token in the position "
  outputTokenBalance: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type PositionWeeklySnapshot @entity @weeklySnapshot {
  " { Position ID }-{ # of weeks since Unix epoch time } "
  id: ID!

  " The position this snapshot belongs to "
  position: Position!

  " Sum of deposits in the position - in input token precision"
  inputTokenDeposits: BigInt!

  " Sum of deposits in the position - in input token precision normalized to USD"
  inputTokenDepositsNormalizedInUSD: BigDecimal!

  " Sum of withdrawals in the position - in input token precision"
  inputTokenWithdrawals: BigInt!

  " Sum of withdrawals in the position - in input token precision normalized to USD"
  inputTokenWithdrawalsNormalizedInUSD: BigDecimal!

  " Amount of input token in the position "
  inputTokenBalance: BigInt!

  " Amount of input token in the position normalized to USD "
  inputTokenBalanceNormalizedInUSD: BigDecimal!

  " Amount of output token in the position "
  outputTokenBalance: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type Ark @entity @regularPolling {
  " Smart contract address of the vault "
  id: ID!

  " The protocol this vault belongs to "
  vault: Vault!

  " Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  " Details of the ark "
  details: String

  " Token that need to be deposited to take a position in protocol "
  inputToken: Token!

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  " DEPRECATED (use depositCap instead): Arks have a deposit cap. This is in input token amount "
  depositLimit: BigInt!

  " Arks have a deposit cap. This is in input token amount "
  depositCap: BigInt!

  " Arks have a maximum deposit percentage of TVL. This is a percentage (100 = 100%) "
  maxDepositPercentageOfTVL: BigInt!

  " Arks have a maximum outflow limit for the Ark during rebalancing. This is in input token amount "
  maxRebalanceOutflow: BigInt!

  " Arks have a maximum inflow limit for the Ark during rebalancing. This is in input token amount "
  maxRebalanceInflow: BigInt!

  " Arks require keeper data to board/disembark if true "
  requiresKeeperData: Boolean!

  " Type of fees incurred to the user. Should include all fees that apply to the vault "
  fees: [VaultFee!]!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the vault, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the vault. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  ##### Snapshots #####

  " Vault daily snapshots "
  dailySnapshots: [ArkDailySnapshot!]! @derivedFrom(field: "ark")

  " Vault hourly snapshots "
  hourlySnapshots: [ArkHourlySnapshot!]! @derivedFrom(field: "ark")

  ##### Events #####

  " All deposits made to this vault "
  boards: [Board!]! @derivedFrom(field: "ark")

  " All withdrawals made from this vault "
  disembarks: [Disembark!]! @derivedFrom(field: "ark")

  # Additional fields
  " Cumulative earnings of the Ark "
  cumulativeEarnings: BigInt!

  " Calculated APR based on earnings between updates "
  calculatedApr: BigDecimal!
  " Cumulative deposits since last update [ helper field ] "
  _cumulativeDeposits: BigInt!

  " Cumulative withdrawals since last update [ helper field ] "
  _cumulativeWithdrawals: BigInt!

  " Last update input token balance [ helper field ] "
  _lastUpdateInputTokenBalance: BigInt!

  " Current total assets in the Ark "
  inputTokenBalance: BigInt!

  " Last update timestamp "
  lastUpdateTimestamp: BigInt!

  rebalancesTo: [Rebalance!]! @derivedFrom(field: "to")
  rebalancesFrom: [Rebalance!]! @derivedFrom(field: "from")

  actionSnapshots: [PostActionArkSnapshot!]! @derivedFrom(field: "ark")
}

type ArkDailySnapshot @entity @dailySnapshot {
  " { Smart contract address of the vault }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " The ark this snapshot belongs to "
  ark: Ark!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  " APR based on last day's revenue "
  apr: BigDecimal!
}

type ArkHourlySnapshot @entity @hourlySnapshot {
  " { Smart contract address of the vault }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " The ark this snapshot belongs to "
  ark: Ark!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  " APR based on last hour's revenue "
  calculatedApr: BigDecimal!
}

type PostActionVaultSnapshot @entity @hourlySnapshot {
  " { Smart contract address of the vault }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Price of input token in USD "
  inputTokenPriceUSD: BigDecimal

  " Amount of input token per full share of output token. Usually corresponds to the value of `pricePerShare` or `pricePerFullShare` in the vault contract. "
  pricePerShare: BigDecimal

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  "Current APR"
  apr: BigDecimal!
}

type PostActionArkSnapshot @entity @hourlySnapshot {
  " { Smart contract address of the vault }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: YieldAggregator!

  " The vault this snapshot belongs to "
  vault: Vault!

  " The ark this snapshot belongs to "
  ark: Ark!

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " Amount of input token in the pool "
  inputTokenBalance: BigInt!

  " Deposit limit of the ark "
  depositLimit: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  #  Additional fields
  "Current APR"
  apr: BigDecimal!
}

type RewardsManager @entity {
  id: ID!
  vault: Vault!
}

type DailyInterestRate @entity {
  id: ID!
  date: BigInt!
  sumRates: BigDecimal!
  updateCount: BigInt!
  averageRate: BigDecimal!
  vault: Vault!
}

type HourlyInterestRate @entity {
  id: ID!
  date: BigInt!
  sumRates: BigDecimal!
  updateCount: BigInt!
  averageRate: BigDecimal!
  vault: Vault!
}

type WeeklyInterestRate @entity {
  id: ID!
  date: BigInt!
  sumRates: BigDecimal!
  updateCount: BigInt!
  averageRate: BigDecimal!
  vault: Vault!
}
