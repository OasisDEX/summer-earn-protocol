// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.28;

import {ArkTestHelpers} from "./ArkTestHelpers.sol";
import {FleetCommanderTestHelpers} from "./FleetCommanderTestHelpers.sol";
import {OneInchTestHelpers} from "./OneInchTestHelpers.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import {Test, console} from "forge-std/Test.sol";

contract TestHelpers is
    Test,
    FleetCommanderTestHelpers,
    ArkTestHelpers,
    OneInchTestHelpers
{
    using ECDSA for bytes32;
    /**
     * @dev Signs a given message using the provided private key.
     * @param privateKey The private key used to sign the message.
     * @param message The message to be signed.
     * @return signature The complete signature in bytes format.
     */

    function signMessage(
        uint256 privateKey,
        string memory message
    ) public pure returns (bytes memory signature) {
        bytes32 messageHash = getEthSignedMessageHash(message);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey, messageHash);
        return abi.encodePacked(r, s, v);
    }

    /**
     * @dev Verifies that a given signature corresponds to a given message and signer.
     * @param message The original message that was signed.
     * @param signature The signature generated by signing the message.
     * @param signer The address of the signer that is expected to have created the signature.
     * @return bool Returns true if the signature is valid and was created by the given signer, otherwise false.
     */
    function verifySignature(
        string memory message,
        bytes memory signature,
        address signer
    ) public pure returns (bool) {
        bytes32 messageHash = getEthSignedMessageHash(message);
        return recoverSigner(messageHash, signature) == signer;
    }

    /**
     * @dev Generates the Ethereum signed message hash for a given message.
     * This function uses the keccak256 hashing algorithm to encode the message.
     *
     * @param message The message to be hashed.
     * @return The Ethereum signed message hash as a bytes32 value.
     */
    function getEthSignedMessageHash(
        string memory message
    ) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(message));
    }

    /**
     * @dev Recovers the address that signed the given message hash with the provided signature.
     * @param messageHash The hash of the signed message.
     * @param signature The signature generated by signing the message hash.
     * @return The address that signed the message hash.
     */
    function recoverSigner(
        bytes32 messageHash,
        bytes memory signature
    ) public pure returns (address) {
        return messageHash.recover(signature);
    }

    function test() public {}
}
