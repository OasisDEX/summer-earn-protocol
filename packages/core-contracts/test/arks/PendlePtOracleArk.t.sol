// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.28;

import "../../src/contracts/arks/PendlePTArk.sol";
import {Test, console} from "forge-std/Test.sol";

import {ConfigurationManager} from "../../src/contracts/ConfigurationManager.sol";

import "../../src/events/IArkEvents.sol";
import {IConfigurationManager} from "../../src/interfaces/IConfigurationManager.sol";

import {ConfigurationManagerParams} from "../../src/types/ConfigurationManagerTypes.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {ProtocolAccessManager} from "@summerfi/access-contracts/contracts/ProtocolAccessManager.sol";
import {IProtocolAccessManager} from "@summerfi/access-contracts/interfaces/IProtocolAccessManager.sol";

import {IPAllActionV3} from "@pendle/core-v2/contracts/interfaces/IPAllActionV3.sol";
import {IPMarketV3} from "@pendle/core-v2/contracts/interfaces/IPMarketV3.sol";

import {ArkTestBase} from "./ArkTestBase.sol";
import {IPMarketV3} from "@pendle/core-v2/contracts/interfaces/IPMarketV3.sol";
import {PERCENTAGE_100, Percentage, PercentageUtils} from "@summerfi/percentage-solidity/contracts/PercentageUtils.sol";

import {PendlePtOracleArk} from "../../src/contracts/arks/PendlePtOracleArk.sol";
import {LimitOrderData, TokenInput, TokenOutput} from "@pendle/core-v2/contracts/interfaces/IPAllActionTypeV3.sol";
import {IPAllActionV3} from "@pendle/core-v2/contracts/interfaces/IPAllActionV3.sol";

import {FleetCommander} from "../../src/contracts/FleetCommander.sol";
import {ApproxParams} from "@pendle/core-v2/contracts/router/base/MarketApproxLib.sol";
import {SwapData, SwapType} from "@pendle/core-v2/contracts/router/swap-aggregator/IPSwapAggregator.sol";
import {StdStorage, stdStorage} from "forge-std/Test.sol";

contract PendlePTArkTestFork2 is Test, IArkEvents, ArkTestBase {
    using stdStorage for StdStorage;

    PendlePtOracleArk public usdcArk;
    PendlePtOracleArk public usdceArk;

    uint256 constant BASE_PRICE = 1e18;
    address constant USDE = 0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34;
    address constant USDCE = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8;
    address constant USDC = 0xaf88d065e77c8cC2239327C5EDb3A432268e5831;

    uint256 constant FORK_BLOCK = 262371325;
    uint256 constant SELL_FORK_BLOCK = 265122362;
    // USDE-ARBITRUM-AUG2024
    // Thursday, 29 August 2024 00:00:00
    uint256 PREVIOUS_MARKET_EXPIRY_BLOCK = 247756661; // approx
    uint256 constant PREVIOUS_MARKET_EXPIRY = 1724889600;
    address constant PREVIOUS_MARKET =
        0x2Dfaf9a5E4F293BceedE49f2dBa29aACDD88E0C4;
    // USDE-ARBITRUM-NOV2024
    uint256 constant MARKET_EXPIRY = 1732752000;
    address constant MARKET = 0x281fE15fd3E08A282f52D5cf09a4d13c3709E66D;

    address constant NEXT_MARKET = 0x3d1E7312dE9b8fC246ddEd971EE7547B0a80592A;
    uint256 constant MARKET_EXPIRY_BLOCK = 279011501;
    address constant PREVIOUS_SY = 0xb3C24D9dcCC2Ec5f778742389ffe448E295B84e0;
    address constant PREVIOUS_PT = 0xad853EB4fB3Fe4a66CdFCD7b75922a0494955292;
    address constant PREVIOUS_YT = 0xF478f7FeaeAB0DFdC91E02cDd6C63c66E30a7335;

    address constant SY = 0xA4ffe78ba40B7Ec0C348fFE36a8dE4F9d6198d2d;
    address constant PT = 0x1FA42e6730DF74fF2742704761Da41111bB7F019;
    address constant YT = 0x8D0aC6c608fd4BF52FcC31DcEf30D0aE2aED2e81;
    address constant PENDLE = 0x808507121B80c02388fAd14726482e061B8da827;
    address constant ROUTER = 0x888888888889758F76e7103c6CbF23ABbF58F946;
    address constant ORACLE = 0x9a9Fa8338dd5E5B2188006f1Cd2Ef26d921650C2;
    address constant CURVE_POOL = 0x1c34204FCFE5314Dcf53BE2671C02c35DB58B4e3;

    bytes swapDataBuy1USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000000000df99a7269f11a1f000000000000000000000000000000000000000000000000070edecfc3ba6a490000000000000000000000000000000000000000000000000ed26d811b0778cc0000000000000000000000000000000000000000000000000e1dbd9f8774d492000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000f42400000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000011d010300000048000000ba12222222228d8ba445958a75a0704d566bf2c80052688295413b32626d226a205b95cdb337de860002000000000000000003d100000000000000000000000000000f42400b0000001a02000000b19005b42e2dcc65fb6a5598db329edfe365a0b201010a0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010aff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff0000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea3e24fbf700000000000000000df642bfd5bbedb7000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000dd284a4510968c700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002307b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22302e39393937323036303139303335333235222c22416d6f756e744f7574555344223a22312e30303330353236323233343839333432222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231303036303634393538343535393334333931222c2254696d657374616d70223a313732383537313837322c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2241766d3968464248767532587a726e4b645178653636574f3141714f654939566a5864753733426f764747313742746c5a32524e4a77636949356c3176476d6d36393564614e5243654763564d682b5957336c6a6d7269392b2f4d2f6e6a31354b764b5a7176746c7845624969336c7973564552753049324c78467936333844676d76543331614644716b506839665074414171434f364e2b5730724652622f757848763363304b6c3733635a6a30624b7452386f642b6441756247696f2f2f364373796f34317675527a464a7935497a7a384378432f6b495658665442515153593569764c6d65336a3339726f4a4e516b4b523731494773316d696d45494a63653061346b2f6f514c4435665a5166574e2f57584c642f3368525441576e414958796334586c4b30644572364175474571334839475642783432677269356f444a42684136765a52336d39357871382f78384466513d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy500000USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000069923a762bdbe205eaf600000000000000000000000000000000000000000000337ff58fa538674736d3000000000000000000000000000000000000000000006ff02a0fc2afc4272ab90000000000000000000000000000000000000000000066ffeb1f4a70ce8e6da6000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000b80000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000746a5288000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000034b05020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000028bed016000000000000000000000000000000000000000000000000000000000000000000150000004d02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3401000000000000000000000000000000000000000000000000000000000000000015020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000037e11d60000000000000000000000000000000000000000000000000000000000000000000150000001a020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa01010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d2000000000000000000000004a817c800010a0000004d02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3401000000000000000000000000000000000000000000000000000000000000000015020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000ba43b74000000000000000000000000000000000000000000000000000000000000000000150000001c010000001c34204fcfe5314dcf53be2671c02c35db58b4e30101000009020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000037e11d6000000000000000000000000000000000000000000000000000000000000000000150000001a020000001caf100cd74792d4be6c64621c2e21c7830868c401010aff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000006f31830d88153db0000000000006a0ad3df539b61ce91d5000000000000000000000000000000000000000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000746a5288000000000000000000000000000000000000000000000068fb5bfe5f9225f2e76900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000746a52880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223439393134392e37373533353531313138222c22416d6f756e744f7574555344223a223439383939372e30323836363938353831222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22353030373730353831363338313038313233343032373039222c2254696d657374616d70223a313732383536393539302c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22583665396a43313548696e374d37313158746b6c453666394d31305863794f7241725a486b3057684a7a5261626a6a713270527048787163384c626957376d5a44647579775a2f354f54332b6856494b5164514b73346c7a734b44695152533172594b5459585538347877776e6c726b457a4b726d332f6c653977394f30395472566c72526d2f6c55642b4537763572534f4f5949394c2f4a776d752b577246744562493744534d5a36434164645669714c346e2b3166317832324e356b314a736665384657366b537335675970763454704f33714a42574f4d61594854535051566a4b754355684e67732b474f6c7374333555524646426f4d726b76344e467851487738415333774c3958376e4f7263726853324b432b7251516b4d3964654f4858664863794d38386a76413067383450352b4139626578356c5a6b76736b38344a7671337743457157564e7474774f67363869513d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c9b3e2c3ec88b1b4c0cd853f4321000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000056bc75e2d631000002b51384dc7d8cf76455911b8176b1a8a9a7bd07a06ab8fdec875b780d717ca3c000000000000000000000000000000000000000000000000000000006722f071000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000008d0ac6c608fd4bf52fcc31dcef30d0ae2aed2e8100000000000000000000000011754d553729454ba17bc3d7d31f8b95fe41462800000000000000000000000011754d553729454ba17bc3d7d31f8b95fe4146280000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000009c611fc362cab60000000000000000000000000000000000000000000000000c7d713b49da0000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e760c42a1b8aef72260823cbbdc9074a2741689956e5148c0356f156275dd22202a6c9fe0fc53e9540dafd8a55a7b9cdf7d07c0e9cc55e15d3bf6c8f11fdfb241b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy100000USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000153691aebfd45daff35c000000000000000000000000000000000000000000000ab6b62ee22d31e7160f00000000000000000000000000000000000000000000167fb1c8daf8826547ed00000000000000000000000000000000000000000000156d6c5dc45a63ce2c1f000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000b20000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000884e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002f705020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000826299e000000000000000000000000000000000000000000000000000000000000000000150000004d02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3401000000000000000000000000000000000000000000000000000000000000000015020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000000150000001a020000001caf100cd74792d4be6c64621c2e21c7830868c401010a020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000ba43b74000000000000000000000000000000000000000000000000000000000000000000150000001a020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa01010a020000003d0000009dd329f5411466d9e0c488ff72519ca9fef0cb40020000000000000000000000012a05f2009dd329f5411466d9e0c488ff72519ca9fef0cb4001080000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d20000000000000000000000012a05f200010a0000001a020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa01010aff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff00000040000000000000000000000000000000000000000000000000000000000000000000000000000000000163ea3fed1b972b0000000000001536d51defba3f6b41e8000000000000000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000001500862f8e9c39aa2f5300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002347b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223130303134352e31343632323436313831222c22416d6f756e744f7574555344223a223130303233312e3535323635393234333533222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030313831313737303134313330343735343833363234222c2254696d657374616d70223a313732383536393231332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22504d636a4f74694364644f67483177373753445748447759325964397036415674726f574c6a626f62302f5364773564423753616f4853734655706778616757525648667773645936437973526d7847363870415170366766416f462b68446270553155526146445a77325430544247486456316239727056792f6555564c7a59356c7067326f357733396f7a5430423743385746457362644276677672524f546d2f68473671697179554779516d7a3547346e3133486877394c4e7a2f4d4744594b6547784671453458766f385a4d667831752b6d58446c67356f4f3546574242353732525351516b77686c707a5772744f75466e6e6966786c7049385339586457423964436c73486d617145456d74456e674d4766636c7650645158394c2b447175317a38546a37744d4e6c726964415563787067426456495a39524a514a7179546b4f6c2f4c2b6a61306674625a5a503937513d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy10000USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000021fa289b02d37a4178a0000000000000000000000000000000000000000000001129026825a11c2110f000000000000000000000000000000000000000000000240951dab56bee45706000000000000000000000000000000000000000000000225204d04b42384221f000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000a80000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000002540be4000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000000000024304020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d200000000000000000000000059682f00010a0000001a020000001caf100cd74792d4be6c64621c2e21c7830868c401010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d2000000000000000000000001a13b8600010a0000004d02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3401000000000000000000000000000000000000000000000000000000000000000015020000003d0000009dd329f5411466d9e0c488ff72519ca9fef0cb40020000000000000000000000003b9aca009dd329f5411466d9e0c488ff72519ca9fef0cb4001080000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a020000005c02000000c86eb7b85807020b4548ee05b54bfc956eebbfcdaf88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000001dcd65000000000000000000000000000000000000000000000000000000000000000000150000001a020000001caf100cd74792d4be6c64621c2e21c7830868c401010aff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff0000004000000000000000000000000000000000000000000000000000000000000000000000000000000000002398d25e8f6ad0000000000000021f2a9ffb5fdf9bd0ca0000000000000000000000000000000000000000000000000000000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000219bc1e61d21d5f609f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002347b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2231303034332e383131323731343138323539222c22416d6f756e744f7574555344223a2231303033332e323434383035363538333734222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223130303139363533343831383834333638343930363938222c2254696d657374616d70223a313732383536393237362c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224f4f502b673454447264643248534859304f306653734c69584876622b556858584c624b395330353138677757463744314c2f66356e534644316943754d4a3961532b66374a57356545524d56626a655378474f4e72464f5043665053756269466f4d59596a4c443138554953317a3733325231517670526f32324f31344e394c4d4a66586c37784c41754176746a6739516d35705532323339304542785148314c6c742f4354564c42576f6c70326e4f747a7a534a4b3750706b51712f7a7a42386f344e3341736137397643644c7a7a4f556b43767a453738764b75624946444e3666426e6c444f656657395179384d4854504e746a4570654668776c317a4b3452356a2b416f73704c383354477142662b695831594671594c6579454a336c574c56683451505a6a334a4d676946664b6e6d4c4378686f462b53675a6a32502b6b4533754648343634576b57732f5547334543773d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy1000USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000000365fa8975a0d22884900000000000000000000000000000000000000000000001b76216e0e733d6672000000000000000000000000000000000000000000000039ab4633eb253423f0000000000000000000000000000000000000000000000036ec42dc1ce67acce5000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000940000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000011201020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d20000000000000000000000003b9aca00010a0000004d02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3401000000000000000000000000000000000000000000000000000000000000000015ff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000038f58be6dac650000000000000036520bdfb4fbc8eb980000000000000000000000000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000035c6fc65265faac04700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313030342e33383131323731343138323539222c22416d6f756e744f7574555344223a22313030332e33393534373334333039373133222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231303032303336323434383834353831303531323838222c2254696d657374616d70223a313732383536393331392c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224d2b65343354573750617049543964686c544c7456496851352b383237395161636a6e4d4357794a65524c4c31324c713462415a415a5065484d6b6e3351544c4d6d6357736b7641712f546433686a2f4f754b75384a5359537671545342646e7136365a4c596d6f696d393672757957635244794c6258716d647a625449384b4a3148753655354355737a4733524258663576346939536d48363362386c3836597343543673314b7a62706d4766426e41587737397644672b376772696535752f5166327343497a6649344453783256397a7469496c6b714951676a31626830665157546851737235424251656234625164724868744a7644745739434e6442795069394c6a656a68777247547035434e476d4a4155626b6769766b6f64744948474238627a4c545a734c424c4642725637614b4f77356455684273346d4c6c79307233614b58307049644265505367545234556e413d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    bytes swapDataBuy100USDCE =
        hex"c81f847a0000000000000000000000001d1499e622D69689cdf9004d05Ec547d650Ff211000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000000056fff9632625e46ba000000000000000000000000000000000000000000000002bf078c80e184f297000000000000000000000000000000000000000000000005c45ca70ea663fd700000000000000000000000000000000000000000000000057e0f1901c309e52e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000900000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000df01020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d200000000000000000000000005f5e100010a0000001a020000001caf100cd74792d4be6c64621c2e21c7830868c401010aff970a61a04b1ca14834a43f5de4533ebddb5cc85d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000005b23565046ba00000000000000056ea7f3ca6b37a74700000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000560bfdf6ecb6cdb5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022e7b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223130302e33353237363337373336383936222c22416d6f756e744f7574555344223a223130302e3335373630333739353639222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030323037333330303834353338323633333637222c2254696d657374616d70223a313732383536393335322c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224f78746a4e345a744f57646b30505068546d616e68384b5359744c76636a304e416247796d6535572b46416a42734d536752426a47707a6d4e6f78504c675a5339326633747446547775552b66784c4c7676673279456b485579494f62697a67784b4b76626842743865737831372b63346b6355636777664a61497a4634592f6832526971774b32316c775a49646d73304f624c68375732587250325a35437a3941424d4a2f5149332b30766e55594d63384d5437316b54574739657a6a4f474a526d4f777368476b2f43447a7a446335666544546a514364584e6c516b6c4b684e45307470336d53654177495349416d4232374a36437a76346d43466c43325350544370676132314f507a526451336f78582b6158387a6346637336614f72576635786a4168635636346a5042416775476365754d4b4d4e79786d5636666849634745787831414d797a336b353177714630682f413d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy100USDC =
        hex"c81f847a000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000000570294257f21c1a66000000000000000000000000000000000000000000000002bf1c9874d2326540000000000000000000000000000000000000000000000005c488d9c21fd03b070000000000000000000000000000000000000000000000057e3930e9a464ca81000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000008e0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000c0010100000029020000001caf100cd74792d4be6c64621c2e21c7830868c400000000000000000000000005f5e100010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000005b2603b6a53500000000000000056ed0ce29b267eba9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000560e85138a3d266be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002327b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223130302e3333373939323034393339353931222c22416d6f756e744f7574555344223a223130302e3233313633363531333137363237222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030323138383239313836333537373833343635222c2254696d657374616d70223a313732383536393339342c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224d365345547a4c39387745436659644a4e2f4c514d5a682f434a38416876483564354f4d3377436a6f4b3754735a325664386577616c7a4f6146426d565950455a677a38356b776869324b78447848552f323848744e31324e5951716b637a4e79304677515a344b59546371583248684c2f4e796f30574738564373425841714a2b397453724d2b4f66586e6b6d38435155672b56347265593664457544775644675268505a4a64516b6a797847303945426b666453746135526d4a7941634a716f665534416e3272635647356e774d5a6e4a544c764f496b306730614c31464e4b59737859732f435a333133706b2f6f785246487a58786457435a4b35612b776266654552326e6756553036736b696e4939654f62585161725a4235746b57774d776c3366784157516f6d494561786867434d565054673856687934393837554c4a63434256307165736978516b674c332f7536773d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy1000USDC =
        hex"c81f847a000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000000365e5acc1cfe813df600000000000000000000000000000000000000000000001b7578d8dd831fa858000000000000000000000000000000000000000000000039a9e42dd12cf5ae53000000000000000000000000000000000000000000000036eaf1b1bb063f50b1000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000a40000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000021c040300000029020000006f38e884725a116c9c7fbf208e79fe8828a2595f00000000000000000000000002625a00010a0000001a02000000389938cf14be379217570d8e4619e51fbdafaa2101010a0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a030000002902000000fa1cc0cae7779b214b1112322a2d1cf0b511c3bc00000000000000000000000002faf080010a0000001a02000000b19005b42e2dcc65fb6a5598db329edfe365a0b201010a0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a030000003e020000001666ea6e83bcc3473111732ef086ba47e6eddeb70000000000000000000000002756cd00000000000000000000000000000000000000000000010c0000001a02000000389938cf14be379217570d8e4619e51fbdafaa2101010a0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a0100000029020000001caf100cd74792d4be6c64621c2e21c7830868c40000000000000000000000000ee6b280010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000038f4f43d21fd20000000000000036517b3c9cfe0fb80f00000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000035c66d3453be14ae8900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a22313030302e39383631373032393932373933222c22416d6f756e744f7574555344223a22313030312e36333538363839383239313234222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231303031393935353333313634343938333638353237222c2254696d657374616d70223a313732383536393434312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224d3735667771554b41525a4a4d6a454a6d492b6f5a75614c73664668336d7a512b6b78446678473147566e4a756d795453394f39537a2b396e3938453975686c695268516734482b4a4f36316b6b306442627437496b327351554270317a6571554748323465314b58734e32726c6477567a5a5a733149546d72676554716e4c4377594836616a686b376d566b4c595070655a496f322f6374634a586368556e77706a792f4b2f666467736270696f716b5936304557394f6f52316c716a6774356b4639304457727874767846396734356c623456486c394c73333747387141387734554f434652543365613163465271333448734f773669454447576f6e334e4c516e53414f6b62584d654c455832676472634d78684e6752463048744a37494a6f30512f76356d5955705a716e3941395935596f32302f576b73643664693679704377707248636b5a57506e69577034365532773d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy10000USDC =
        hex"c81f847a000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000021facefc7d6d043625700000000000000000000000000000000000000000000011295670014928ea372000000000000000000000000000000000000000000000240a02519c4cd5ebda20000000000000000000000000000000000000000000002252ace0029251d46e4000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000009c0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000002540be4000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000724e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000184030100000029020000001caf100cd74792d4be6c64621c2e21c7830868c40000000000000000000000005f5e1000010a010000005c02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000001836e2100000000000000000000000000000000000000000000000000000000000000000015020000003d02000000fc43aaf89a71acaa644842ee4219e8eb77657427fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000713fb3001b0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff00000040000000000000000000000000000000000000000000000000000000000000000000000000000000000023992b783d464f000000000000021f2fef8b74fa1defba00000000000000000000000000000000000000000000000000000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000219c160596c209365a600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002327b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2231303030352e393739343731363536393235222c22416d6f756e744f7574555344223a22393939312e3938313734313130353134222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223130303230303336313634373938303331373230333738222c2254696d657374616d70223a313732383536393438362c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224247326e31335934534e32375a31354e73787149326b432b676466582f37426a672b6637654e4d4359647a72386747686377366a465554447a4849657845646b6f726b624973737066736d4369384c4b77312b413366736237744b316f504d6b527444634b32677344633430566f6a7a4954726c534a35544a783836354f31704856633936464d4b597668583473577967456c4a63456e3941734649594c39756d4454574f58686846712f314f38516f7633347639306e564e464f387a325435763544435569503956716176757752432f3554534f4e386b41363330536e63456677666e306e66315151396a77525a322f464b3731716f2f6b5461316f344b73735a725742646166526371486653773467794a6546326a766d583157315270796d636a517a6e4853524f6f476e556771616555477031334e6666766c4a4566697473787a486c6e4e397a366566694d3133794b3442513d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy100000USDC =
        hex"c81f847a000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d000000000000000000000000000000000000000000001536e4be55f1ad32c665000000000000000000000000000000000000000000000ab6e022118c28edaf3000000000000000000000000000000000000000000000168009e124d98926564c00000000000000000000000000000000000000000000156dc044231851db5e61000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000009e0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000744e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000001b304010000005c02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef3400000000000000000000000826299e00000000000000000000000000000000000000000000000000000000000000000015020000003d02000000fc43aaf89a71acaa644842ee4219e8eb77657427fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000000165a0bc001b0000001a02000000fa4971dc5ad81b4fccaffad0a584d13192b7d2ba01010a0100000029020000001caf100cd74792d4be6c64621c2e21c7830868c4000000000000000000000000ee6b2800010a0100000029020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa00000000000000000000000cce416600010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff00000040000000000000000000000000000000000000000000000000000000000000000000000000000000000163ece3d2c1526e0000000000001536fd674e9e5c0d8af300000000000000000000000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000001500ae11cb45bc69913d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a2239393835312e3630373736383235303938222c22416d6f756e744f7574555344223a2239393832342e3537323434313930373733222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030313834303739393639383939313138343330393633222c2254696d657374616d70223a313732383536393530362c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2251324d306e444d2b7a395748626358384c744755594853356962792f54762f736f6434616d362b57706b385a3773524876645a45595056675535496b34497a6f634a686d4d4971536d2f4d5979736a334677416c524775435279347647546837416f7770514d386975574d6c74553862694d765679746b37656c685830414a663867534f343655793871384e4f4f78794a3473784d68753872506b574d596966796955726a696537426c6c2b6a6a506c7250574a6a4833737362553144537664754a72416252584b6d6b397457304132434c4b356b49336c57736d3332786b38722f6c65664154655577376f6b647534627758554e6d32306e6c5449504b7630445a4a4f3078663675466b595977786b2f5270535171613769487574724c706c6f39747a656a63367375352b756851503274316430616c2f6265576b31674d456b7257364f624a566233475a4272304847566c6874773d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataBuy500000USDC =
        hex"c81f847a000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d0000000000000000000000000000000000000000000069937e2468a47ed15c860000000000000000000000000000000000000000000032bfdba93b34cd11d28a000000000000000000000000000000000000000000006ff2eda8b24724f8064600000000000000000000000000000000000000000000657fb75276699a23a514000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000009c0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000746a5288000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000724e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000018204010000005c02000000c23f308cf1bfa7efffb592920a619f00990f8d745d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000320effa6000000000000000000000000000000000000000000000000000000000000000000150100000029020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa000000000000000000000034630b8a00010a010000002b010000001c34204fcfe5314dcf53be2671c02c35db58b4e30100000000000000000000000ba43b74000000090100000029020000001caf100cd74792d4be6c64621c2e21c7830868c4000000000000000000000002540be400010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000006f3301a02d918710000000000006a0c40b8e5f51d338e24000000000000000000000000000000000000000000000000000000000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f946000000000000000000000000000000000000000000000000000000746a5288000000000000000000000000000000000000000000000068fcc531ede5dce8ccb800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000746a52880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223439383932332e303730363731363431222c22416d6f756e744f7574555344223a223439383731362e3735323037353437323236222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22353030373936383731383433333231393639303835393838222c2254696d657374616d70223a313732383536393534352c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225a7a6972555333347a676e79446e64647a636d57355851797739346b6a4b525248447a744c327769326257674e413332575742584a7853373742442f5747374b4e4174655831436d6f706b4a6173344f5165616648452b74586677473869547a48364d437241697451304f51764736767a707678336c73465335726d59514674343754484d4830422b344d79503134585179712b4474584548766a5248566f4d7a615a747336644a527253386a73536c364e6742706d317a5468344d4d37567847636436474d3549365969454d36716f7971584b304e6b5a31564443716c564a4b762b39304f3351515862314938487673735430345156434f5258417578473372697546786a7458527741776e6e7136376979796a626632687939622b5636496d356e594f4a476c4f6955764b41796939743734686a396b41467733706170414f5a33384777475942567534514231594a53737a6f413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c9b3e2c3ec88b1b4c0cd853f4321000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000056bc75e2d631000002b51384dc7d8cf76455911b8176b1a8a9a7bd07a06ab8fdec875b780d717ca3c000000000000000000000000000000000000000000000000000000006722f071000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000008d0ac6c608fd4bf52fcc31dcef30d0ae2aed2e8100000000000000000000000011754d553729454ba17bc3d7d31f8b95fe41462800000000000000000000000011754d553729454ba17bc3d7d31f8b95fe4146280000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000009c611fc362cab60000000000000000000000000000000000000000000000000c7d713b49da0000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e760c42a1b8aef72260823cbbdc9074a2741689956e5148c0356f156275dd22202a6c9fe0fc53e9540dafd8a55a7b9cdf7d07c0e9cc55e15d3bf6c8f11fdfb241b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000359becf15f9611236671f120f33b79bddf884a446a1e5fdcf9f00e669f8ce3c295bc8971e3f7100000000000000000000000000000000000000000000000000000000671ff804000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000008d0ac6c608fd4bf52fcc31dcef30d0ae2aed2e81000000000000000000000000fb767623703bed4e61a47f01a7b71341876bfb97000000000000000000000000fb767623703bed4e61a47f01a7b71341876bfb9700000000000000000000000000000000000000000000000000039ebe96ac0235000000000000000000000000000000000000000000000000000000e8d49d6ee00000000000000000000000000000000000000000000000000c7d713b49da0000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a10bfbc3f78844a884ea183adf6e059209f6ca77b88ccebe828d82df15afce3f4a912c4e18d7cf855ef69aade6af3b7e3d94b09e9ead82aed1333f79ad2b538e1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes swapDataSell100000USDC =
        hex"594a88cc000000000000000000000000a0Cb889707d426A7A386870A03bc70d1b0697598000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000156d5fd641e5b3edee0300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000008e0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000017196a09b00000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b50000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000006e4e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000151030100000029020000003223859e24d5413947761cb79d3094f21be69bfa00000000000009c4108073a4dee53d8e010a010000005c02000000c23f308cf1bfa7efffb592920a619f00990f8d74af88d065e77c8cc2239327c5edb3a432268e58310000000000000737dfacdb0a8e7ceaae0000000000000000000000000000000000000000000000000000000000000000150100000029020000008bb586cc81b60cc8c8102aefe69e9572ab0df3fa000000000000043efc0b53abdb588a0c010a5d3a1ff2b6bab83b63cd9ad0787074081a52ef34af88d065e77c8cc2239327c5edb3a432268e5831888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff0000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001877400000000000000000000001755254a6f0000000000000000000000000000000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f94600000000000000000000000000000000000000000000153aec38a25b48bab24800000000000000000000000000000000000000000000000000000017196a09b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000153aec38a25b48bab24800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002297b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223130303033342e3634313737313034343034222c22416d6f756e744f7574555344223a223130303030312e3332353034393530333334222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030323132373535303535222c2254696d657374616d70223a313732393236303537322c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22636b4250394664725037726b334c57354e4c416b4e4337494f317a744c77504a2b4e4c5951346d7362557a4d465a6e475135382f6f47477152683145576a716b3948704635596f646d763372353253776e3567507044437369434c6945696c303650367573376b59766b6d6e574a4d493344533578654f6b43477a4d745145687041333875504e646258412b376741487364696f4439755948486d4b6861454d4d4f497a784b7272343877595378727a7863594f686c667a616465466f38335a4a43597042636f72563431615246776e6f66586d707a703032372f476a314b6d6379396c397257777964496735793852365268374b736a782f396b6f626138707731336577694670446d545a42622f726a704a6b4433794e776153672b5936754a476b585762444d526c4b4958456a474548743673306946767254794133303355486964306c764e6273722f472f6a57446f6e4964413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    IERC20 public usde;
    IERC20 public usdc;
    IERC20 public usdce;
    IPMarketV3 public pendleMarket;
    IPAllActionV3 public pendleRouter;

    FleetCommander usdcFleetCommander;
    FleetCommander usdceFleetCommander;

    uint256 forkId;

    function setUp() public {
        initializeCoreContracts();
        forkId = vm.createSelectFork(vm.rpcUrl("arbitrum"), FORK_BLOCK);

        usde = IERC20(USDE);
        usdce = IERC20(USDCE);
        usdc = IERC20(USDC);
        pendleMarket = IPMarketV3(MARKET);
        pendleRouter = IPAllActionV3(ROUTER);

        PendlePtOracleArk.PendlePtArkConstructorParams
            memory pendlePtArkConstructorParams = PendlePtOracleArk
                .PendlePtArkConstructorParams({
                    market: MARKET,
                    oracle: ORACLE,
                    router: ROUTER
                });
        PendlePtOracleArk.CurveSwapArkConstructorParams
            memory curveSwapArkConstructorParams = PendlePtOracleArk
                .CurveSwapArkConstructorParams({
                    curvePool: CURVE_POOL,
                    basePrice: BASE_PRICE,
                    lowerPercentageRange: PercentageUtils.fromFraction(
                        1e18,
                        1e18
                    ),
                    upperPercentageRange: PercentageUtils.fromFraction(
                        1e18,
                        1e18
                    )
                });
        // Create USDC Ark
        ArkParams memory usdcParams = ArkParams({
            name: "Pendle USDC PT Ark",
            details: "USDC Ark details",
            accessManager: address(accessManager),
            configurationManager: address(configurationManager),
            asset: USDC,
            depositCap: type(uint256).max,
            maxRebalanceOutflow: type(uint256).max,
            maxRebalanceInflow: type(uint256).max,
            requiresKeeperData: true,
            maxDepositPercentageOfTVL: PERCENTAGE_100
        });
        usdcArk = new PendlePtOracleArk(
            usdcParams,
            pendlePtArkConstructorParams,
            curveSwapArkConstructorParams
        );

        // Create USDCE Ark
        ArkParams memory usdceParams = ArkParams({
            name: "Pendle USDCE PT Ark",
            details: "USDCE Ark details",
            accessManager: address(accessManager),
            configurationManager: address(configurationManager),
            asset: USDCE,
            depositCap: type(uint256).max,
            maxRebalanceOutflow: type(uint256).max,
            maxRebalanceInflow: type(uint256).max,
            requiresKeeperData: true,
            maxDepositPercentageOfTVL: PERCENTAGE_100
        });
        usdceArk = new PendlePtOracleArk(
            usdceParams,
            pendlePtArkConstructorParams,
            curveSwapArkConstructorParams
        );

        (
            address usdceFleetCommanderAddress,

        ) = setupFleetCommanderWithBufferArk(
                USDCE,
                PercentageUtils.fromFraction(1, 1e18),
                "TEST-SUM"
            );
        usdceFleetCommander = FleetCommander(usdceFleetCommanderAddress);
        (
            address usdcFleetCommanderAddress,

        ) = setupFleetCommanderWithBufferArk(
                USDC,
                PercentageUtils.fromFraction(1, 1e18),
                "TEST-SUM"
            );
        usdcFleetCommander = FleetCommander(usdcFleetCommanderAddress);
        // Permissioning
        vm.startPrank(governor);
        accessManager.grantCommanderRole(address(usdceArk), commander);
        accessManager.grantCommanderRole(address(usdcArk), commander);
        accessManager.grantCommanderRole(
            address(usdceArk),
            address(usdceFleetCommanderAddress)
        );
        accessManager.grantCommanderRole(
            address(usdcArk),
            address(usdcFleetCommanderAddress)
        );

        usdcFleetCommander.addArk(address(usdcArk));
        usdceFleetCommander.addArk(address(usdceArk));
        accessManager.grantCuratorRole(
            address(usdceFleetCommanderAddress),
            governor
        );
        accessManager.grantCuratorRole(
            address(usdcFleetCommanderAddress),
            governor
        );

        usdceArk.setNextMarket(NEXT_MARKET);
        usdcArk.setNextMarket(NEXT_MARKET);
        vm.stopPrank();
        vm.label(USDE, "USDE");
        vm.label(MARKET, "MARKET");
        vm.label(NEXT_MARKET, "NEXT_MARKET");
        vm.label(SY, "SY");
        vm.label(PT, "PT");
        vm.label(YT, "YT");
        vm.label(PENDLE, "PENDLE");
        vm.label(ROUTER, "ROUTER");
        vm.label(ORACLE, "ORACLE");

        vm.makePersistent(address(usdceArk));
        vm.makePersistent(address(usdcArk));
        vm.makePersistent(address(usdceFleetCommander));
        vm.makePersistent(address(usdcFleetCommander));
        vm.makePersistent(address(accessManager));
        vm.makePersistent(address(configurationManager));
        vm.makePersistent(USDE);
        vm.makePersistent(MARKET);
        vm.makePersistent(SY);
        vm.makePersistent(PT);
        vm.makePersistent(PREVIOUS_PT);
    }

    function test_multiple_ark_types() public {
        bytes[4] memory usdcDataBlobs = [
            swapDataBuy100USDC,
            swapDataBuy1000USDC,
            swapDataBuy10000USDC,
            swapDataBuy100000USDC
            // swapDataBuy500000USDC
        ];
        uint256[4] memory usdcAmounts = [
            uint256(100 * 10 ** 6),
            uint256(1000 * 10 ** 6),
            uint256(10000 * 10 ** 6),
            uint256(100000 * 10 ** 6)
            // uint256(500000 * 10 ** 6)
        ];

        bytes[5] memory usdceDataBlobs = [
            swapDataBuy1USDCE,
            swapDataBuy100USDCE,
            swapDataBuy1000USDCE,
            swapDataBuy10000USDCE,
            swapDataBuy100000USDCE
            // swapDataBuy500000USDCE
        ];

        uint256[5] memory usdceAmounts = [
            uint256(1 * 10 ** 6),
            uint256(100 * 10 ** 6),
            uint256(1000 * 10 ** 6),
            uint256(10000 * 10 ** 6),
            uint256(100000 * 10 ** 6)
            // uint256(500000 * 10 ** 6)
        ];

        // // Test USDC Ark
        for (uint256 i = 0; i < usdcDataBlobs.length; i++) {
            _testBoardAndRescue(
                usdcArk,
                USDC,
                usdcDataBlobs[i],
                usdcAmounts[i],
                "USDC"
            );
        }

        // Test USDCE Ark
        for (uint256 i = 0; i < usdceDataBlobs.length; i++) {
            _testBoardAndRescue(
                usdceArk,
                USDCE,
                usdceDataBlobs[i],
                usdceAmounts[i],
                "USDCE"
            );
        }
    }

    function test_RolloverIfNeeded_PendlePTArk_fork() public {
        commander = address(usdcFleetCommander);
        bytes
            memory swapDataBuy100USDCRollArk = hex"c81f847a000000000000000000000000D6BbDE9174b1CdAa358d2Cf4D57D1a9F7178FBfF000000000000000000000000281fe15fd3e08a282f52d5cf09a4d13c3709e66d00000000000000000000000000000000000000000000000570294257f21c1a66000000000000000000000000000000000000000000000002bf1c9874d2326540000000000000000000000000000000000000000000000005c488d9c21fd03b070000000000000000000000000000000000000000000000057e3930e9a464ca81000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000008e0000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef340000000000000000000000000cc097ac029a7541c4e894c789c7aaa2a9794a2900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000c0010100000029020000001caf100cd74792d4be6c64621c2e21c7830868c400000000000000000000000005f5e100010aaf88d065e77c8cc2239327c5edb3a432268e58315d3a1ff2b6bab83b63cd9ad0787074081a52ef34888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000007fffffff000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000005b2603b6a53500000000000000056ed0ce29b267eba9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000005d3a1ff2b6bab83b63cd9ad0787074081a52ef34000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000888888888889758f76e7103c6cbf23abbf58f9460000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000560e85138a3d266be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002327b22536f75726365223a2250656e646c65222c22416d6f756e74496e555344223a223130302e3333373939323034393339353931222c22416d6f756e744f7574555344223a223130302e3233313633363531333137363237222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313030323138383239313836333537373833343635222c2254696d657374616d70223a313732383536393339342c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224d365345547a4c39387745436659644a4e2f4c514d5a682f434a38416876483564354f4d3377436a6f4b3754735a325664386577616c7a4f6146426d565950455a677a38356b776869324b78447848552f323848744e31324e5951716b637a4e79304677515a344b59546371583248684c2f4e796f30574738564373425841714a2b397453724d2b4f66586e6b6d38435155672b56347265593664457544775644675268505a4a64516b6a797847303945426b666453746135526d4a7941634a716f665534416e3272635647356e774d5a6e4a544c764f496b306730614c31464e4b59737859732f435a333133706b2f6f785246487a58786457435a4b35612b776266654552326e6756553036736b696e4939654f62585161725a4235746b57774d776c3366784157516f6d494561786867434d565054673856687934393837554c4a63434256307165736978516b674c332f7536773d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy100USDCRollArk});
        bytes memory encodedBoardData = abi.encode(boardData);
        // Set up the fork at an earlier block
        vm.rollFork(241501737);
        vm.makePersistent(PREVIOUS_PT);
        vm.makePersistent(PREVIOUS_MARKET);

        // Create a new Ark with the previous market
        PendlePtOracleArk.PendlePtArkConstructorParams
            memory pendlePtArkConstructorParams = PendlePtOracleArk
                .PendlePtArkConstructorParams({
                    market: PREVIOUS_MARKET,
                    oracle: ORACLE,
                    router: ROUTER
                });
        PendlePtOracleArk.CurveSwapArkConstructorParams
            memory curveSwapArkConstructorParams = PendlePtOracleArk
                .CurveSwapArkConstructorParams({
                    curvePool: CURVE_POOL,
                    basePrice: BASE_PRICE,
                    lowerPercentageRange: PercentageUtils.fromFraction(
                        1e18,
                        1e18
                    ),
                    upperPercentageRange: PercentageUtils.fromFraction(
                        1e18,
                        1e18
                    )
                });
        ArkParams memory usdcParams = ArkParams({
            name: "Pendle USDC PT Ark for Rollover Test",
            details: "USDC Ark details",
            accessManager: address(accessManager),
            configurationManager: address(configurationManager),
            asset: USDC,
            depositCap: type(uint256).max,
            maxRebalanceOutflow: type(uint256).max,
            maxRebalanceInflow: type(uint256).max,
            requiresKeeperData: true,
            maxDepositPercentageOfTVL: PERCENTAGE_100
        });
        PendlePtOracleArk rolloverTestArk = new PendlePtOracleArk(
            usdcParams,
            pendlePtArkConstructorParams,
            curveSwapArkConstructorParams
        );
        console.log("rolloverTestArk", address(rolloverTestArk));
        vm.startPrank(governor);
        accessManager.grantCommanderRole(
            address(rolloverTestArk),
            address(usdcFleetCommander)
        );
        accessManager.grantCuratorRole(address(usdcFleetCommander), governor);
        usdcFleetCommander.addArk(address(rolloverTestArk));
        rolloverTestArk.setNextMarket(MARKET);
        vm.stopPrank();
        vm.makePersistent(address(rolloverTestArk));
        // Mint some PT tokens to the Ark
        uint256 initialPtBalance = 1000 * 1e18;
        deal(PREVIOUS_PT, address(rolloverTestArk), initialPtBalance);

        // Fast forward to just before the expiry block
        vm.rollFork(262371325);

        // Check the initial state
        assertEq(
            IERC20(PREVIOUS_PT).balanceOf(address(rolloverTestArk)),
            initialPtBalance,
            "Initial PT balance incorrect"
        );
        assertEq(
            rolloverTestArk.market(),
            PREVIOUS_MARKET,
            "Initial market incorrect"
        );
        uint256 additionalDeposit = 100 * 10 ** 6;
        deal(USDC, address(commander), additionalDeposit);
        vm.prank(commander);
        IERC20(USDC).approve(address(rolloverTestArk), additionalDeposit);
        // Attempt to deposit 0 to trigger rollover
        vm.prank(governor);
        accessManager.grantCommanderRole(
            address(rolloverTestArk),
            address(commander)
        );

        uint256 totalAssetsBeforeRollover = rolloverTestArk.totalAssets();

        vm.prank(commander);
        rolloverTestArk.board(additionalDeposit, encodedBoardData);

        uint256 totalAssetsAfterRollover = rolloverTestArk.totalAssets();
        console.log("totalAssetsBeforeRollover  ", totalAssetsBeforeRollover);
        console.log("totalAssetsAfterRollover   ", totalAssetsAfterRollover);
        console.log("deposited amount           ", additionalDeposit);
        console.log(
            "additional deposit         ",
            totalAssetsAfterRollover - totalAssetsBeforeRollover
        );
        // Check if rollover occurred
        assertEq(
            rolloverTestArk.market(),
            MARKET,
            "Market should have rolled over"
        );
        assertGt(
            IERC20(PT).balanceOf(address(rolloverTestArk)),
            0,
            "New PT balance should be greater than 0"
        );
        assertEq(
            IERC20(PREVIOUS_PT).balanceOf(address(rolloverTestArk)),
            0,
            "Old PT balance should be 0"
        );

        // Verify that totalAssets is still close to the initial value (accounting for some slippage)
        assertApproxEqRel(
            totalAssetsAfterRollover,
            totalAssetsBeforeRollover + additionalDeposit,
            0.05e18,
            "Total assets should be close to initial balance"
        );
    }

    function test_Disembark_PendlePTArk_fork() public {
        commander = address(usdcFleetCommander);
        PendlePtOracleArk.DisembarkData memory disembarkData = PendlePtOracleArk
            .DisembarkData({swapPtForTokenParams: swapDataSell100000USDC});
        _testBoardForArk(
            usdcArk,
            USDC,
            swapDataBuy100000USDC,
            100000 * 10 ** 6,
            "USDC"
        );
        bytes memory encodedDisembarkData = abi.encode(disembarkData);
        console.log("totalAssets before disembark", usdcArk.totalAssets());
        vm.rollFork(SELL_FORK_BLOCK);
        uint256 totalAssets = usdcArk.totalAssets();
        console.log("totalAssets (USDC)          ", totalAssets);
        uint256 usdcBalanceCommanderBefore = IERC20(USDC).balanceOf(commander);
        uint256 usdcBalanceArkBefore = IERC20(USDC).balanceOf(address(usdcArk));
        vm.prank(commander);
        usdcArk.disembark(totalAssets, encodedDisembarkData);
        uint256 usdcBalanceCommanderAfter = IERC20(USDC).balanceOf(commander);
        uint256 usdcBalanceArkAfter = IERC20(USDC).balanceOf(address(usdcArk));
        console.log("usdcBalanceCommanderBefore  ", usdcBalanceCommanderBefore);
        console.log("usdcBalanceCommanderAfter   ", usdcBalanceCommanderAfter);
        console.log("usdcBalanceArkBefore        ", usdcBalanceArkBefore);
        console.log("usdcBalanceArkAfter         ", usdcBalanceArkAfter);
    }

    function test_Board_PendlePTArk_fork() public {
        commander = address(usdceFleetCommander);
        // Arrange
        uint256 amount = 1000 * 10 ** 6;
        deal(USDCE, commander, amount);

        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy1000USDCE});
        bytes memory encodedBoardData = abi.encode(boardData);

        vm.startPrank(commander);
        usdce.approve(address(usdceArk), amount);

        // Expect the Boarded event to be emitted
        vm.expectEmit(true, true, false, true);
        emit Boarded(commander, USDCE, amount);

        // Act
        usdceArk.board(amount, encodedBoardData);
        vm.stopPrank();

        // Assert
        uint256 assetsAfterDeposit = usdceArk.totalAssets();
        assertApproxEqRel(
            assetsAfterDeposit,
            amount,
            0.05 ether,
            "Total assets should be close to deposited amount"
        );

        // Check that the Ark has received PT tokens
        uint256 ptBalance = IERC20(PT).balanceOf(address(usdceArk));
        assertTrue(ptBalance > 0, "Ark should have PT tokens");

        // Simulate some time passing
        vm.warp(block.timestamp + 30 days);

        uint256 assetsAfterAccrual = usdceArk.totalAssets();
        assertTrue(
            assetsAfterAccrual >= assetsAfterDeposit,
            "Assets should not decrease over time"
        );
    }

    function test_SetSlippagePercentage() public {
        Percentage newSlippagePercentage = PercentageUtils.fromFraction(1, 100);

        vm.prank(governor);
        usdceArk.setSlippagePercentage(newSlippagePercentage);

        assertTrue(
            usdceArk.slippagePercentage() == newSlippagePercentage,
            "Slippage Percentage not updated correctly"
        );
    }

    function test_SetSlippagePercentage_RevertOnInvalidValue() public {
        Percentage invalidSlippagePercentage = PercentageUtils.fromFraction(
            101,
            100
        );

        vm.prank(governor);
        vm.expectRevert(
            abi.encodeWithSignature(
                "SlippagePercentageTooHigh(uint256,uint256)",
                invalidSlippagePercentage,
                PERCENTAGE_100
            )
        );
        usdceArk.setSlippagePercentage(invalidSlippagePercentage);
    }

    function test_SetOracleDuration() public {
        uint32 newOracleDuration = 1800; // 30 minutes

        vm.prank(governor);
        usdceArk.setOracleDuration(newOracleDuration);

        assertEq(
            usdceArk.oracleDuration(),
            newOracleDuration,
            "Oracle duration not updated correctly"
        );
    }

    function test_SetOracleDuration_RevertOnInvalidValue() public {
        uint32 invalidOracleDuration = 10 minutes; // Less than 15 minutes

        vm.prank(governor);
        vm.expectRevert(
            abi.encodeWithSignature(
                "OracleDurationTooLow(uint32,uint256)",
                10 minutes,
                15 minutes
            )
        );
        usdceArk.setOracleDuration(invalidOracleDuration);
    }

    function test_RevertWhenNoValidNextMarket() public {
        commander = address(usdceFleetCommander);
        // Setup: Board some assets first
        uint256 amount = 1000 * 10 ** 6;
        deal(USDCE, commander, 2 * amount);

        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy1000USDCE});
        bytes memory encodedBoardData = abi.encode(boardData);

        vm.startPrank(commander);
        usdce.approve(address(usdceArk), 2 * amount);
        usdceArk.board(amount, encodedBoardData);
        vm.stopPrank();

        // Fast forward time past market expiry
        vm.warp(usdceArk.marketExpiry() + 1);

        // Mock _findNextMarket to return address(0)
        vm.mockCall(
            address(usdceArk),
            abi.encodeWithSignature("nextMarket()"),
            abi.encode(address(0))
        );

        // Attempt to trigger rollover
        vm.expectRevert(abi.encodeWithSignature("InvalidNextMarket()"));
        vm.prank(commander);
        usdceArk.board(amount, encodedBoardData);
    }

    function test_TotalAssets() public {
        commander = address(usdceFleetCommander);
        // Setup: Board some assets first
        uint256 amount = 1000 * 10 ** 6;
        deal(USDCE, commander, amount);

        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy1000USDCE});
        bytes memory encodedBoardData = abi.encode(boardData);

        vm.startPrank(commander);
        usdce.approve(address(usdceArk), amount);
        usdceArk.board(amount, encodedBoardData);
        vm.stopPrank();

        uint256 totalAssets = usdceArk.totalAssets();
        assertApproxEqRel(
            totalAssets,
            amount,
            0.01e18,
            "Total assets should be close to deposited amount"
        );
    }

    function test_SetupRouterParams() public view {
        // This test assumes routerParams is made public for testing purposes
        (, uint256 guessMax, , uint256 maxIteration, uint256 eps) = usdceArk
            .routerParams();
        assertEq(guessMax, type(uint256).max, "Incorrect guessMax");
        assertEq(maxIteration, 256, "Incorrect maxIteration");
        assertEq(eps, 1e15, "Incorrect eps");
    }

    // function test_UpdateMarketData() public view {
    //     uint256 expectedExpiry = IPMarketV3(MARKET).expiry();
    //     assertEq(
    //         usdceArk.marketExpiry(),
    //         expectedExpiry,
    //         "Market expiry not updated correctly"
    //     );
    // }

    function test_Harvest_PendlePTArk_fork() public {
        // Setup: Mock reward tokens and amounts
        address[] memory mockRewardTokens = new address[](2);
        mockRewardTokens[0] = address(0x1111);
        mockRewardTokens[1] = address(0x2222);

        uint256[] memory mockRewardAmounts = new uint256[](2);
        mockRewardAmounts[0] = 100 * 1e18;
        mockRewardAmounts[1] = 200 * 1e18;

        // Mock IPMarketV3.getRewardTokens()
        vm.mockCall(
            MARKET,
            abi.encodeWithSignature("getRewardTokens()"),
            abi.encode(mockRewardTokens)
        );

        // Mock IPMarketV3.redeemRewards()
        vm.mockCall(
            MARKET,
            abi.encodeWithSignature(
                "redeemRewards(address)",
                address(usdceArk)
            ),
            abi.encode(mockRewardAmounts)
        );

        // Mock IERC20.transfer() for both reward tokens
        for (uint256 i = 0; i < mockRewardTokens.length; i++) {
            vm.mockCall(
                mockRewardTokens[i],
                abi.encodeWithSelector(
                    IERC20.transfer.selector,
                    raft,
                    mockRewardAmounts[i]
                ),
                abi.encode(true)
            );
        }

        // Act: Call harvest function
        vm.prank(raft);
        // Verify that transfer was called for each reward token
        for (uint256 i = 0; i < mockRewardTokens.length; i++) {
            vm.expectCall(
                mockRewardTokens[i],
                abi.encodeWithSelector(
                    IERC20.transfer.selector,
                    raft,
                    mockRewardAmounts[i]
                )
            );
        }
        (, uint256[] memory rewardAmounts) = usdceArk.harvest("");

        assertEq(
            rewardAmounts[0],
            mockRewardAmounts[0],
            "Expected reward amount should match mock reward amount"
        );
        assertEq(
            rewardAmounts[1],
            mockRewardAmounts[1],
            "Expected reward amount should match mock reward amount"
        );
    }

    function test_WithdrawFromExpiredMarket_ByGovernance() public {
        commander = address(usdceFleetCommander);
        // Setup: Board some assets first
        uint256 amount = 1000 * 10 ** 6;
        deal(USDCE, commander, amount);

        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy1000USDCE});
        bytes memory encodedBoardData = abi.encode(boardData);

        vm.startPrank(commander);
        usdce.approve(address(usdceArk), amount);
        usdceArk.board(amount, encodedBoardData);
        vm.stopPrank();

        // Fast forward time past market expiry
        vm.warp(usdceArk.marketExpiry() + 1);

        // Mock the market as expired
        vm.mockCall(
            address(usdceArk),
            abi.encodeWithSignature("isMarketExpired()"),
            abi.encode(true)
        );

        // Get initial balances
        uint256 initialArkBalance = IERC20(PT).balanceOf(address(usdceArk));
        uint256 initialGovernorBalance = usde.balanceOf(governor);

        // Attempt to withdraw as non-governor (should fail)
        vm.prank(commander);
        vm.expectRevert(
            abi.encodeWithSignature("CallerIsNotGovernor(address)", commander)
        );
        usdceArk.withdrawExpiredMarket();

        // Withdraw as governor
        vm.prank(governor);
        usdceArk.withdrawExpiredMarket();

        // Get final balances
        uint256 finalArkBalance = usde.balanceOf(address(usdceArk));
        uint256 finalGovernorBalance = usde.balanceOf(governor);

        // Assert
        assertEq(
            finalArkBalance,
            0,
            "Ark should have no USDCE balance after withdrawal"
        );
        assertTrue(
            finalGovernorBalance > initialGovernorBalance,
            "Governor should have received USDE"
        );
        console.log("finalGovernorBalance", finalGovernorBalance);
        console.log("initialGovernorBalance", initialGovernorBalance);
        console.log("initialArkBalance", initialArkBalance);
        console.log("pt balance ark", IERC20(PT).balanceOf(address(usdceArk)));
        assertApproxEqRel(
            finalGovernorBalance - initialGovernorBalance,
            initialArkBalance,
            0.01e18,
            "Governor should have received close to the initial Ark balance"
        );

        // Verify that the Ark's total assets are now zero
        assertEq(
            usdceArk.totalAssets(),
            0,
            "Ark's total assets should be zero after governance withdrawal"
        );
    }

    function _testBoardForArk(
        PendlePtOracleArk ark,
        address token,
        bytes memory swapDataBuy,
        uint256 amount,
        string memory symbol
    ) internal {
        if (address(ark) == address(usdceArk)) {
            commander = address(usdceFleetCommander);
        } else if (address(ark) == address(usdcArk)) {
            commander = address(usdcFleetCommander);
        }
        PendlePtOracleArk.BoardData memory boardData = PendlePtOracleArk
            .BoardData({swapForPtParams: swapDataBuy});
        bytes memory encodedBoardData = abi.encode(boardData);

        deal(token, commander, amount);
        vm.prank(commander);
        IERC20(token).approve(address(ark), amount);
        vm.prank(governor);
        ark.setEmaRange(
            PercentageUtils.fromFraction(50, 10000), // 0.15%
            PercentageUtils.fromFraction(50, 10000) // 0.15%
        );
        vm.prank(commander);
        ark.board(amount, encodedBoardData);

        uint256 usdeBalanceOfArk = IERC20(USDE).balanceOf(address(ark));
        uint256 tokenBalanceOfArk = IERC20(token).balanceOf(address(ark));
        uint256 ptBalanceOfArk = IERC20(PT).balanceOf(address(ark));

        console.log("--- Test for", symbol, "amount:", amount / 10 ** 6);
        console.log("usdeBalanceOfArk               : ", usdeBalanceOfArk);
        console.log("tokenBalanceOfArk              : ", tokenBalanceOfArk);
        console.log("exchange rate                  : ", ark.getExchangeRate());
        console.log("ptBalanceOfArk                 : ", ptBalanceOfArk);
        console.log("deposited amount               : ", amount);
        console.log("total assets                   : ", ark.totalAssets());
        console.log("deposited amount - no decimals : ", amount / 10 ** 6);
        console.log(
            "total assets   - no decimals   : ",
            ark.totalAssets() / 10 ** 6
        );
        console.log("---");
    }

    function _testBoardAndRescue(
        PendlePtOracleArk ark,
        address token,
        bytes memory swapDataBuy,
        uint256 amount,
        string memory symbol
    ) internal {
        _testBoardForArk(ark, token, swapDataBuy, amount, symbol);
        uint256 ptBalanceOfArk = IERC20(PT).balanceOf(address(ark));
        vm.prank(address(ark));
        IERC20(PT).transfer(governor, ptBalanceOfArk);
    }
}
